----------------------------- MODULE AbsJupiter -----------------------------
(*
Abstract Jupiter, inspired by the COT algorithm proposed by Sun and Sun.
See their paper published on TPDS'2009.
*)
EXTENDS JupiterSerial
-----------------------------------------------------------------------------
VARIABLES
    cseq,   \* cseq[c]: local sequence number at client c \in client
    ds,     \* ds[r]: document state at replica r \in Replica
    copss   \* copss[r]: the state space (i.e., a set) of Cops maintained at replia r \in Replica
    
vars == <<intVars, serialVars, cseq, ds, copss>>
-----------------------------------------------------------------------------
TypeOK ==
    /\ TypeOKInt
    /\ TypeOKSerial
    /\ Comm(Cop)!TypeOK
    /\ cseq \in [Client -> Nat]
    /\ ds \in [Replica -> SUBSET Oid]
    /\ copss \in [Replica -> SUBSET Cop]
-----------------------------------------------------------------------------
Init ==
    /\ InitInt
    /\ InitSerial
    /\ Comm(Cop)!Init
    /\ cseq = [c \in Client |-> 0]
    /\ ds = [r \in Replica |-> {}]
    /\ copss = [r \in Replica |-> {}]
-----------------------------------------------------------------------------
RECURSIVE xForm(_, _)
xForm(cop, r) ==
    LET ctxDiff == ds[r] \ cop.ctx  \* THEOREM: cop.ctx \subseteq ds[r]
        RECURSIVE xFormHelper(_, _, _)
        xFormHelper(coph, ctxDiffh, copssr) ==  \* 'h' stands for "helper"
            IF ctxDiffh = {} 
            THEN <<coph, copssr \cup {coph}>>
            ELSE LET foph == CHOOSE op \in ctxDiffh: \* the first op (specifically, oid) in serial
                                \A opprime \in ctxDiffh: 
                                    opprime # op => tb(op, opprime, serial[r])
                     fcophDict == {op \in copssr: op.oid = foph /\ op.ctx = coph.ctx}
                     fcoph == CHOOSE op \in fcophDict: TRUE \* THEOREM: Cardinality(fophDict) = 1
                     cophx == COT(coph, fcoph)
                     fcophx == COT(fcoph, coph)
                  IN xFormHelper(cophx, ctxDiffh \ {foph}, copssr \cup {cophx, fcophx})
     IN xFormHelper(cop, ctxDiff, copss[r]) 

Perform(cop, r) ==
    LET xform == xForm(cop, r)  \* <<xcop, xcopss>> 
        xcop == xform[1] 
        xcopssr == xform[2]
     IN /\ state' = [state EXCEPT ![r] = Apply(xcop.op, @)]
        /\ ds' = [ds EXCEPT ![r] = @ \cup {cop.oid}]
        /\ copss' = [copss EXCEPT ![r] = xcopssr]
-----------------------------------------------------------------------------
(*
Client c \in Client issues an operation op.
*)
DoOp(c, op) == \* op: the raw operation generated by the client c \in Client
    /\ cseq' = [cseq EXCEPT ![c] = @ + 1]
    /\ LET cop == [op |-> op, oid |-> [c |-> c, seq |-> cseq'[c]], ctx |-> ds[c]]
       IN  /\ Perform(cop, c)
           /\ Comm(Cop)!CSend(cop)

DoIns(c) ==
    \E ins \in {op \in Ins: op.pos \in 1 .. (Len(state[c]) + 1) /\ op.ch \in chins /\ op.pr = Priority[c]}:
        /\ DoOp(c, ins)
        /\ chins' = chins \ {ins.ch} \* We assume that all inserted elements are unique.

DoDel(c) == 
    \E del \in {op \in Del: op.pos \in 1 .. Len(state[c])}:
        /\ DoOp(c, del)
        /\ UNCHANGED chins

Do(c) == 
    /\ DoSerial(c)
    /\ \/ DoIns(c) 
       \/ DoDel(c)
-----------------------------------------------------------------------------
Rev(c) ==
    /\ Comm(Cop)!CRev(c)
    /\ Perform(Head(cincoming[c]), c)
    /\ RevSerial(c)
    /\ UNCHANGED <<chins, cseq>>
-----------------------------------------------------------------------------
SRev ==
    /\ Comm(Cop)!SRev
    /\ LET cop == Head(sincoming)
        IN /\ Perform(cop, Server)
           /\ Comm(Cop)!SSendSame(cop.oid.c, cop)
    /\ SRevSerial
    /\ UNCHANGED <<chins, cseq>>
-----------------------------------------------------------------------------
Next ==
    \/ \E c \in Client: Do(c) \/ Rev(c)
    \/ SRev

Fairness ==
    WF_vars(SRev \/ \E c \in Client: Rev(c))

Spec == Init /\ [][Next]_vars \* /\ Fairness
-----------------------------------------------------------------------------
CSSync == TRUE
=============================================================================
\* Modification History
\* Last modified Fri Dec 07 14:59:07 CST 2018 by hengxin
\* Created Wed Dec 05 19:55:52 CST 2018 by hengxin